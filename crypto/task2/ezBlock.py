import hashlib
import pwn
from Crypto.Util.number import *
from secret import flag, key, e

s_box = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]


def sbox_substitution(data):
    return bytes([s_box[b] for b in data])


def encrypt(block, key_):
    cs = []
    for i in range(6):
        temp = sbox_substitution(block[i])
        temp = temp[:-2] + b"\x00" * 2
        temp = pwn.xor(temp, key_)
        key_ = key_[-2:] + key_[:-2]
        cs.append(temp)
    return cs

def multiply(z1, z2):
    real = z1[0] * z2[0] - z1[1] * z2[1]
    imag = z1[0] * z2[1] + z1[1] * z2[0]
    return real, imag


p = getPrime(1024)
q = getPrime(1024)
n = p * q
assert isPrime(e)
c = long_to_bytes(pow(bytes_to_long(flag), e, n))
print(f"c2={c[72:]}")
print(f"y**2-y-e**2+e=={2 * 19055507}")
print(f"hint2={multiply((20, p), (25, q))}")
message = c[:72]
n = len(message) // 6
blocks = [message[i:i + n] for i in range(0, len(message), n)]

print(f"c={encrypt(blocks, key)}")
for b in blocks:
    print(f"\"{hashlib.sha256(b).hexdigest()}\"")
'''
c2=b"\xecl\x9fq\x19\xaa=\xf63\xce\x10\xe7\n\xa2\xfe\x1205\x0bwfv|\x88\xaa\\z|\xab\x1c|\xb5\xbd\x13=o \xd9\x94\x1d:\xc7'\xd2&\x91ML\xa2\x9d\x9ag\xb5\xa3\x84\xe4\xa6\x8c\xf8\xe3\xa6\x91\xdau9V,\xe2k\x12\x8b\xf4\xfdS\x9dapJ@\xcd`\xa5\xf5|\xbc\x97\xd2T\xce\xcc\x01\x83\x0f,\x88\xb2;}\x02\x87\x8f\x02\xbf\xb2\x1ehO\x93\xc9\xf6&Te\xcej\xfb.Qxn\x95\x05\xf6!\x84\xf9\xdf<\xdf\xbd\xd78}CB\xa4\x99\x03\xf8\x9b\xfe'\xfb\xda\xafI\xd6/\x8e\xe9\xf6\x9d=K\xa8?Y)<\xc2v\xf9\xd2\xc8\xf7\x18\x96\xd1+\x97\xb2\xe3\x804Aq<Q+\x8d\x9d\x03\x06g"
y**2-y-e**2+e==38111014
hint2=(-14412309885795408436657260020142960025622079556595429918662401741824508383324424796997883886820200433512616096378897363866158056885248264943978511367756268527569447859212227207299336962895670517697865214249821812431228839233824772618174047889662645184703292400871522664849392802247757196674750123988110939399943125059107986376762316974486119879521914533803021441701289407121067320960975302346006650795029105888660217164081815320227402720149192084902594112056861244820008243228477492770869760218604331659521476073325455423853427715804378005535282248078623089732384298504539428980245460427732615492251400199929881043533, 5408413627596064340662671371172161189220332605866324491198127130024480936313978661346151257364320118889430074868550419529338845862245246401188651751552807338026536437530752178105718913079119483530368553175301592495066868361876586084030477225090532115815167380920851600422684722746828910364989027150047202005795)
c=[b'/\xd8\xccLu\x0c\x0e62\x88er', b'\xc6t\xcb\x8b\xd2&oJ\xf1\xf2sp', b'\xf0\x90\xdb\x10\xb4\n(\x9e\xdbNhi', b'D\xd3\xc1y4\x8c\xecT\x1c\xf7_W', b'EBQo`3?\x11m\xf4wn', b'S\xfaueny\x0f!\xcc\x87Da']
"7db9073905729800f2e671c439a5e02bd7c10530448ebaaca9d833b6bbf2c66b"
"9c9df0dfda6b3bb5eddec40730b1b8dd7b1880f34389225010202e51ab559826"
"77372e5236e11aae083e7f177a31790c8cafd86eaa8cb7749ff7d8c517542380"
"225ee0d80214ac3a35e92396f1dc368185bed22473c7d5b6c413d8f1bd80fb6d"
"7527ae1ba9f5069e534d1dee1d1f7996a87ba24cd5c5f4e70d75f63e413e71e7"
"50569fb96ea0f7deff0a375f3b90ad54ce6c40d5cd231c998cd4b9f403a058fd"
'''
